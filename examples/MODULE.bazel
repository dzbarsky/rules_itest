bazel_dep(name = "rules_itest")
local_path_override(
    module_name = "rules_itest",
    path = "../",
)

bazel_dep(name = "bazel_lib", version = "3.0.0")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "platforms", version = "0.0.10")
bazel_dep(name = "rules_shell", version = "0.5.0")

bazel_dep(name = "hermetic_cc_toolchain", version = "3.1.0")
toolchains = use_extension("@hermetic_cc_toolchain//toolchain:ext.bzl", "toolchains")
use_repo(toolchains, "zig_sdk")

register_toolchains(
    "@zig_sdk//toolchain:darwin_amd64",
    "@zig_sdk//toolchain:darwin_arm64",
)

bazel_dep(name = "gazelle", version = "0.37.0")
go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")
use_repo(
    go_deps,
    "com_github_aws_aws_sdk_go_v2",
    "com_github_aws_aws_sdk_go_v2_service_dynamodb",
)

bazel_dep(name = "rules_go", version = "0.51.0")
go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(
    name = "go_sdk",
    version = "1.22.3",
)
use_repo(go_sdk, "go_sdk")

bazel_dep(name = "rules_jvm_external", version = "6.2")

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    artifacts = ["com.amazonaws:DynamoDBLocal:2.0.0"],
    exclusions = [
        # rules_jvm_external doesn't really handle these properly, and even if it did,
        # there is no linux-arm64 variant. So we build this one from source instead.
        "com.almworks.sqlite4java:libsqlite4java-linux-amd64",
        "com.almworks.sqlite4java:libsqlite4java-linux-i386",
        "io.github.ganadist.sqlite4java:libsqlite4java-osx-aarch64",
        # TODO(zbarsky): Not sure why we still need this one on Mac...
        #"com.almworks.sqlite4java:libsqlite4java-osx",
        "com.almworks.sqlite4java:sqlite4java-win32-x64",
        "com.almworks.sqlite4java:sqlite4java-win32-x86",
    ],
    lock_file = "//:maven_install.json",
)
use_repo(maven, "maven", "unpinned_maven")

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "com_github_redis_redis",
    build_file = "//redis:BUILD.redis",
    integrity = "sha256-I65GNgUUsl+llqwrMUDMuTKCwqFv5fbYpNPoM2ENZqw=",
    strip_prefix = "redis-6.2.14",
    urls = ["https://github.com/redis/redis/archive/refs/tags/6.2.14.tar.gz"],
)

http_archive(
    name = "sqlite4java",
    build_file = "//third_party:BUILD.sqlite4java",
    integrity = "sha256-zsZtCvre6it1fzl30RBHO15j2a5fbIKCZSKS7YPgPnw=",
    strip_prefix = "sqlite4java-7b55b3eab6901a0e49d6e1129431fa92c4206c0b",
    url = "https://github.com/ganadist/sqlite4java/archive/7b55b3eab6901a0e49d6e1129431fa92c4206c0b.tar.gz",
)

[
    http_archive(
        name = "mysql_8_4_0_" + arch,
        build_file = "//mysql:BUILD.mysql",
        urls = ["https://cdn.mysql.com/archives/mysql-8.4/mysql-8.4.0-" + arch + ".tar." + ext],
        integrity = integrity,
        strip_prefix = "mysql-8.4.0-" + arch,
    ) for (arch, integrity, ext) in [
        ("macos14-arm64", "sha256-tK10p4qkN43wDhFkyZed1mDqCb9H4F9u+DJPTqFBhhg=", "gz"),
        ("macos14-x86_64", "sha256-rbuLfiYVR3aKVI2Xk4pfG2bPhdruCdsorEu2V6p9QZI=", "gz"),
        ("linux-glibc2.28-aarch64", "sha256-9NkYaSm7JgRqO9GjuLdL0jXn7GkxjwmtchjPzABwk5s=", "xz"),
        ("linux-glibc2.28-x86_64", "sha256-N3Zm2BuB79JRDB4SeUoIiphBLt5KAfC5QRD6FUlzSuM=", "xz"),
    ]
]
